#!/bin/bash
set -euo pipefail

# Default memory settings if not provided
MAX_MEMORY=${MAX_MEMORY:-1G}
INIT_MEMORY=${INIT_MEMORY:-1G}
EULA_VALUE=${EULA:-FALSE}
FORGE_DIR=/opt/forge
DATA_DIR=/data

# Server configuration defaults (can be overridden via docker-compose environment)
MOTD_VALUE=${MOTD:-"A Minecraft Server"}
MAX_PLAYERS_VALUE=${MAX_PLAYERS:-20}
ENABLE_WHITELIST_VALUE=${ENABLE_WHITELIST:-false}
ENFORCE_WHITELIST_VALUE=${ENFORCE_WHITELIST:-false}
SERVER_PORT=${SERVER_PORT:-25565}
LEVEL_NAME=${LEVEL_NAME:-world}

log() { echo "[$(date -Is)] $*"; }

# If /data doesn't exist, create it and set ownership
if [ ! -d "${DATA_DIR}" ]; then
  mkdir -p "${DATA_DIR}"
fi

# If no server jar inside /data, try to find an installer in mounted /opt/forge
if [ -z "$(ls -A ${DATA_DIR} 2>/dev/null)" ] || [ ! -f "${DATA_DIR}/forge-server.jar" -a ! -f "${DATA_DIR}/server.jar" ]; then
  log "No server files in ${DATA_DIR}. Looking for installer in ${FORGE_DIR}..."
  if [ -d "${FORGE_DIR}" ] && ls "${FORGE_DIR}"/*installer*.jar >/dev/null 2>&1; then
    INSTALLER_JAR=$(ls "${FORGE_DIR}"/*installer*.jar | head -n1)
    log "Found installer: ${INSTALLER_JAR}. Running installer..."
    # Run installer to install server into /data
    java -jar "${INSTALLER_JAR}" --installServer "${DATA_DIR}"
    log "Installer completed."
  else
    log "No installer found in ${FORGE_DIR}. If you intended to provide the server jar, place it in ${DATA_DIR}."
  fi
fi

# Ensure EULA
if [ "${EULA_VALUE^^}" = "TRUE" ]; then
  echo "eula=true" > "${DATA_DIR}/eula.txt"
  log "Wrote eula.txt = true"
else
  log "EULA not accepted (EULA=${EULA_VALUE}). Server will not start until EULA is accepted."
  exit 1
fi

# Find the forge server jar (look for *forge*.jar or server.jar)
cd "${DATA_DIR}"
SERVER_JAR=""
if ls *forge*.jar >/dev/null 2>&1; then
  SERVER_JAR=$(ls *forge*.jar | head -n1)
elif [ -f server.jar ]; then
  SERVER_JAR=server.jar
fi

if [ -z "${SERVER_JAR}" ]; then
  log "Could not find a Forge server jar in ${DATA_DIR}. Contents:"
  ls -la "${DATA_DIR}"
  exit 2
fi

# Create or update server.properties based on environment variables
SERVER_PROPERTIES_FILE="${DATA_DIR}/server.properties"
log "Ensuring ${SERVER_PROPERTIES_FILE} exists and has environment-driven defaults"
cat > "${SERVER_PROPERTIES_FILE}" <<EOF
# Generated by start-forge.sh
server-port=${SERVER_PORT}
max-players=${MAX_PLAYERS_VALUE}
motd=${MOTD_VALUE}
level-name=${LEVEL_NAME}
enable-jmx-monitoring=false
query.port=25565
allow-nether=true
level-type=default
enable-command-block=false
spawn-protection=16
online-mode=true
EOF

# Handle whitelist and ops files
if [ "${ENABLE_WHITELIST_VALUE,,}" = "true" ]; then
  if [ ! -f "${DATA_DIR}/whitelist.json" ]; then
    log "Creating empty whitelist.json (whitelist enabled)"
    echo '[]' > "${DATA_DIR}/whitelist.json"
  fi
  # Optionally enforce whitelist file contents if requested
  if [ "${ENFORCE_WHITELIST_VALUE,,}" = "true" ]; then
    # if whitelist is empty, warn
    if [ "$(jq -c '. | length' "${DATA_DIR}/whitelist.json" 2>/dev/null || echo 0)" -eq 0 ]; then
      log "Whitelist is empty but enforced. Server will reject non-whitelisted players."
    fi
  fi
else
  # remove whitelist file if exists and not enabled
  if [ -f "${DATA_DIR}/whitelist.json" ]; then
    log "Whitelist disabled via env; leaving whitelist.json in place but server.properties controls it."
  fi
fi

# Ensure ops.json exists (optional: can be populated by mounting or editing on host)
if [ ! -f "${DATA_DIR}/ops.json" ]; then
  log "Creating empty ops.json"
  echo '[]' > "${DATA_DIR}/ops.json"
fi

log "Starting Forge server using ${SERVER_JAR} with -Xms${INIT_MEMORY} -Xmx${MAX_MEMORY}"
exec java -Xms${INIT_MEMORY} -Xmx${MAX_MEMORY} -jar "${SERVER_JAR}" nogui
